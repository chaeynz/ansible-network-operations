- name: Gather facts
  when: ansible_network_os is not defined
  ansible.builtin.setup:
    gather_subset: distribution

- name: Ensure package is installed
  ansible.builtin.include_tasks: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/tasks/{{ ansible_distribution }}.yml"
    - "{{ role_path }}/tasks/unsupported.yml"

- name: Ensure config file
  become: true
  ansible.builtin.template:
    src: bird.j2
    dest: /etc/bird.conf
    validate: "bird -p -c %s"
  notify: Reload bird

- name: Ensure birdwatch service script exists
  tags: pid
  become: true
  ansible.builtin.template:
    src: birdwatch.service_script.j2
    dest: "{{ birdwatch_script_path }}"
    validate: bash -n %s
    mode: '0755'

- name: Ensure oneshot birdnotify systemd unit exists
  tags: pid
  become: true
  ansible.builtin.template:
    src: birdnotify.service.j2
    dest: /etc/systemd/system/birdnotify.service
    validate: systemd-analyze verify %s
    mode: '0755'
  notify: Restart birdnotify.service

- name: Ensure birdwatch systemd units for PIDs exist
  tags: pid
  loop: "{{ vips }}"
  become: true
  ansible.builtin.template:
    src: birdwatch.path.j2
    dest: "/etc/systemd/system/birdwatch-vip_{{ item.ip.replace('.', '_') }}.path"
    validate: systemd-analyze verify %s
    mode: '0755'
  vars:
    pid_path: "{{ item.attached_pid_path }}"

- name: Ensure birdwatch systemd units for PIDs are running
  tags: pid
  loop: "{{ vips }}"
  become: true
  ansible.builtin.systemd:
    name: "birdwatch-vip_{{ item.ip.replace('.', '_') }}.path"
    state: started
    enabled: true

- name: Ensure bird is flying
  become: true
  ansible.builtin.systemd:
    name: bird
    state: started
