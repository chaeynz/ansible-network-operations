---
- name: Listen for netbox events on a webhook
  hosts: all
  execution_stragey: parallel
  sources:
    - ansible.eda.webhook:
        port: "{{ webhook_port | default(5000) }}"

  rules:

  ## DNS Record
    - name: E/netbox/dnsrecord
      condition: |
        event.payload.username != "ansible" and
        event.payload.model == "record" and
        event.payload.data.type is in ['A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'NS', 'PTR', 'TXT', 'SRV', 'MX', 'SSHFP']
      action:
        run_workflow_template:
          name: "E/netbox/dnsrecord"
          organization: Default
          job_args:
            extra_vars:
              dns_records:
                - name: "{{ event.payload.data.name }}"
                  zone: "{{ event.payload.data.zone.name }}"
                  value: "{{ event.payload.data.value }}"
                  type: "{{ event.payload.data.type }}"
                  _state: "{{ 'present' if event.payload.event == 'created' or event.payload.event == 'updated' else 'absent' }}"

  ## Virtual Machine created
    - name: E/netbox/virtualmachine
      condition: |
        (
        event.payload.username != "ansible" and
        event.payload.model == "virtualmachine" and
        event.payload.event == "created"
        ) and (
        event.payload.data.status.value == "planned" or
        event.payload.data.status.value == "active"
        )
      action:
        run_workflow_template:
          name: E/netbox/virtualmachine
          organization: Default
          job_args:
            extra_vars:
              vm_name: "{{ event.payload.data.name }}"
              cluster: "{{ event.payload.data.cluster.name }}"
              template_name: "{{ event.payload.data.custom_fields.vm_template | default('') }}"
              tenant: "{{ event.payload.data.tenant.name }}"
              prefix: "{{ event.payload.data.custom_fields.vm_prefix.prefix }}"
              vcpus: "{{ event.payload.data.vcpus }}"
              memory: "{{ event.payload.data.memory }}"
              subfolder: "{{ event.payload.data.custom_fields.machine_service_category }}"
              platform: "{{ event.payload.data.platform.name }}"

  ## Catch all other events and log them
    - name: Debug
      condition: event.payload is defined
      action:
        debug:
