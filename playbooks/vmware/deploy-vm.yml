---
- name: Deploy a virtual machine in vCenter
  hosts: localhost
  vars:
    credentials: &credentials
      netbox_url: "{{ lookup('ansible.builtin.env', 'NETBOX_API', default=omit) }}"
      netbox_token: "{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN', default=omit) }}"
  tasks:
    - name: Find Guest by name
      community.vmware.vmware_guest_find:
        name: "{{ vm_name }}"
      register: vm_find
      ignore_errors: true

    - debug: var=vm_find

    - name: End play if it exists
      when: vm_find.failed | default(false) is false
      ansible.builtin.meta: end_play

    - name: Fail play if multiple VMs with that name exist
      when: vm_find.folders | default([]) | length >= 2
      ansible.builtin.fail:
        msg:
          - "There are multiple virtual machines with that name, can not operate."
          - "{{ vm_find.folders }}"

    - name: Set vm_template from platform
      when: vm_template is not defined
      ansible.builtin.set_fact:
        vm_template: "{{ lookup('netbox.netbox.nb_lookup', 'platforms', api_filter='name=\"' ~platform ~'\"', raw_data=true).custom_fields.vm_template }}"

    - name: Set VM folder
      when: vm_folder is not defined
      ansible.builtin.set_fact:
        vm_folder: "{{ tenant }}/{{ subfolder | default('') }}"

    - name: Get Netbox prefix details
      ansible.builtin.set_fact:
        nb_prefix: "{{ lookup('netbox.netbox.nb_lookup', 'prefixes', api_filter='prefix=' ~prefix, raw_data=true) }}"

    - name: Ensure VM is in netbox
      when: event.payload is not defined
      netbox.netbox.netbox_virtual_machine:
        <<: *credentials
        data:
          name: "{{ vm_name }}"
          cluster: "{{ cluster }}"
          tenant: "{{ tenant | default(omit) or omit }}"
          vcpus: "{{ vcpus | default(omit) or omit }}"
          memory: "{{ memory | default(omit) or omit }}"
          custom_fields:
            vm_prefix:
              id: "{{ nb_prefix.id }}"
        state: present

    - name: Add interface to vm in NetBox
      register: nb_interface
      netbox.netbox.netbox_vm_interface:
        <<: *credentials
        data:
          name: "eth0"
          virtual_machine: "{{ vm_name }}"
        state: present

    - name: Get IP address from NetBox
      when: ip_address is not defined
      register: nb_ip_address
      netbox.netbox.netbox_ip_address:
        <<: *credentials
        data:
          prefix: "{{ prefix }}"
          assigned_object:
            name: "eth0"
            virtual_machine: "{{ vm_name }}"
        state: present

    - name: Set ip address
      when: ip_address is not defined
      ansible.builtin.set_fact:
        ip_address: "{{ nb_ip_address.ip_address.address }}"

    - name: Set primary IP for vm
      netbox.netbox.netbox_virtual_machine:
        <<: *credentials
        data:
          name: "{{ vm_name }}"
          cluster: "{{ cluster }}"
          primary_ip4: "{{ ip_address }}"

    - name: Get name of datacenter from NetBox
      when: datacenter is not defined and cluster is defined
      ansible.builtin.set_fact:
        datacenter: "{{ lookup('netbox.netbox.nb_lookup', 'clusters', api_filter='name=' ~cluster, raw_data=true).group.name | default(omit) }}"

  ## Could also use nb_prefix.vlan.name, but lets use this data for now
    - name: Get DVS portgroup
      when: nb_prefix.vlan is not none
      register: dvs_portgroups
      community.vmware.vmware_dvs_portgroup_find:
        vlanid: "{{ nb_prefix.vlan.vid }}"

    - name: Define network
      ansible.builtin.set_fact:
        network: >-
          {%- if dvs_portgroup is defined -%}
            {%- set result = (dvs_portgroups.dvs_portgroups | rejectattr('name', 'search', '-DVUplinks-') | first).name -%}
          {%- elif 'nsx-resource' in nb_prefix.tags | map(attribute='name') -%}
            {%- set result = nb_prefix.description -%}
          {%- else -%}
            {%- set result = omit -%}
          {%- endif -%}
          {{ result }}

    - debug:
        msg: "{{ ip_address | ansible.utils.ipaddr('address') }}"

    - name: Clone from template and configure customization
      community.vmware.vmware_guest:
        template: "{{ vm_template }}"
        linked_clone: false
        folder: "{{ vm_folder }}"
        name: "{{ vm_name }}"
        cluster: "{{ cluster }}"
        datacenter: "{{ datacenter }}"
        hardware:
          memory_mb: "{{ memory | default(omit) or omit }}"
          num_cpu_cores_per_socket: "{{ vcpus | default(omit) or omit }}"
          num_cpus: 1
          secure_boot: "{{ omit }}"
          hotadd_cpu: true
          hotadd_memory: true
        networks:
          - start_connected: true
            name: "{{ network }}"
            ip: "{{ ip_address | ansible.utils.ipaddr('address') }}"
            netmask: "{{ ip_address | ansible.utils.ipaddr('netmask') }}"
            gateway: "{{ prefix | ansible.utils.ipaddr('last_usable') }}"
        customization:
          dns_servers: "{{ dns_servers | default(omit) }}"
          hostname: "{{ vm_name }}"
        wait_for_customization: true
        wait_for_ip_address: true
